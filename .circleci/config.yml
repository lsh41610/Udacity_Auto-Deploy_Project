version: 2.1

orbs:
  slack: circleci/slack@4.4.2
  jq: circleci/jq@2.2.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Install AWS CLI if not installed
          when: on_fail
          command: |
            if ! [ -x "$(command -v aws)" ]; then
            pip install awscli
            else
            echo "AWS CLI already installed"
            fi
      - run:
          name: Destroy S3 Buckets
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --force

      - run:
          name: Destroy Stacks
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:5}"
            aws cloudformation delete-stack --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:5}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:5}" \
            --request GET https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID:0:5})
            #SUCCESS = 1
            echo "********** SUCCESS = $SUCCESS"
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert              
             # exit 1
            fi
            
jobs:

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build

            #exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          channel: C020NMZA3R9
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C020NMZA3R9
          event: pass
          template: basic_success_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
           # Your code here
            cd backend
            npm install
            npm run build

            #exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          channel: C020NMZA3R9
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C020NMZA3R9
          event: pass
          template: basic_success_1


  test-frontend:
    docker:
      - image: circleci/node:13.8.0 # Docker image here
    steps:
      - checkout # Checkout code from git
      - restore_cache:
          key: frontend-build # Restore from cache
      - run:
          name: frontend-test
          command: |
            cd frontend
            npm install
            npm install oauth-sign
            npm build
            npm run test
      - slack/notify:
          channel: C020NMZA3R9
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C020NMZA3R9
          event: pass
          template: basic_success_1


                
  test-backend:
    docker:
      - image: circleci/node:13.8.0  # Docker image here
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          key: backend-build
      - run:
          name: backend-test
          command: |
            cd backend
            npm install
            npm build
            npm run test
      - slack/notify:
          channel: C020NMZA3R9
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C020NMZA3R9
          event: pass
          template: basic_success_1

           
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: frontend-scan
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - slack/notify:
          channel: C020NMZA3R9
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C020NMZA3R9
          event: pass
          template: basic_success_1


  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: backend-scan
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack/notify:
          channel: C020NMZA3R9
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C020NMZA3R9
          event: pass
          template: basic_success_1


  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - jq/install
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}" 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            echo "[web]" > .circleci/ansible/inventory.txt
            ip=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress'\
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --output text)
            echo "$ip" >> .circleci/ansible/inventory.txt
            echo "$ip"
            cat .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: IP-${CIRCLE_WORKFLOW_ID:0:5}" \
            --request PUT \
            --data "$ip" https://api.memstash.io/values/IP
      - run:
         name: Install Dependencies
         command: |
           yum -y install tar gzip
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment
      - slack/notify:
          channel: C020NMZA3R9
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C020NMZA3R9
          event: pass
          template: basic_success_1

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: ["37:7f:62:22:c4:a7:56:7b:d0:52:8d:5e:46:1e:bd:36"] 
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              python3 \
              py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
              awscli \
            && rm -rf /var/cache/apk/*
            apk add --update ansible
            apk add --update curl #for slack notify
            apk add --update jq #for slack notify
      - run:
          name: Configure server
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"

            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure      
      - revert-migrations
      - destroy-environment
      - slack/notify:
          channel: C020NMZA3R9
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C020NMZA3R9
          event: pass
          template: basic_success_1


  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
            touch migration.txt
            npm run migrations >> migration.txt
            cat migration.txt
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            if grep -q "has been excuted successfully." migration.txt
            then
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:5}" \
            --request PUT \
            --data "1" https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID:0:5}
            else
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:5}" \
            --request PUT \
            --data "0" https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID:0:5}
            fi

     # Here's where you will add some code to rollback on failure      
      - revert-migrations
      - destroy-environment
      - slack/notify:
          channel: C020NMZA3R9
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C020NMZA3R9
          event: pass
          template: basic_success_1


  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - jq/install
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum -y install tar gzip
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_IP=$(curl -H "token: IP-${CIRCLE_WORKFLOW_ID:0:5}" \
              --request GET https://api.memstash.io/values/IP)
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="http://${BACKEND_IP}:3030" >> "frontend/.env"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            npm install webpack-dev-server -g
            cd frontend
            npm install
            npm run build
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive
      # Here's where you will add some code to rollback on failure      
      - revert-migrations
      - destroy-environment     
      - slack/notify:
          channel: C020NMZA3R9
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C020NMZA3R9
          event: pass
          template: basic_success_1

                   
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: ["37:7f:62:22:c4:a7:56:7b:d0:52:8d:5e:46:1e:bd:36"]
      - attach_workspace:
          at: /tmp/.circleci/ansible  
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible
            apk add --update tar gzip nodejs npm
            apk add --update openssh-client
            apk add --update curl #for slack notify
            apk add --update jq #for slack notify

      - run:
          name: Compress Backend
          command: |
            tar -C backend -czvf artifact.tar.gz .
            ls -la
      - run:
          name: Deploy backend
          command: |
            # your code here
            cat /tmp/.circleci/ansible/inventory.txt
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - revert-migrations
      - destroy-environment
      - slack/notify:
          channel: C020NMZA3R9
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C020NMZA3R9
          event: pass
          template: basic_success_1


  smoke-test:
    docker:
      # Lightweight Docker image
      - image: python:3.7-alpine3.11 
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update tar gzip curl
            apk add --update curl #for slack notify
            apk add --update jq #for slack notify

      - run:
          name: Get backend url and backend smoketest
          command: |
            # your code here
            BACKEND_IP=$(curl -H "token: IP-${CIRCLE_WORKFLOW_ID:0:5}" \
                       --request GET https://api.memstash.io/values/IP)
            URL="http://$BACKEND_IP:3030/api/status"
            echo $URL
            curl $URL
      - run:
          name: Frontend smoke test
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:5}.s3-website-us-west-2.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure  
      #- revert-migrations
      #- destroy-environment
      - slack/notify:
          channel: C020NMZA3R9
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C020NMZA3R9
          event: pass
          template: basic_success_1


  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)

            export STACKS=$(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE \
            --no-paginate --output text)
            
            echo OldWorkflowID: "$OldWorkflowID"
            echo STACKS: "$STACKS"

            aws cloudformation update-stack \
            --use-previous-template \
            --stack-name cloudfront-stack \
            --parameters ParameterKey=WorkflowID,ParameterValue=$CIRCLE_WORKFLOW_ID,UsePreviousValue=false 
            curl -H "Content-Type: text/plain" -H "token: OLDWorkflowID-${CIRCLE_WORKFLOW_ID}" \
            --request PUT \
            --data "$OldWorkflowID" https://api.memstash.io/values/OldWorkflowID

      # Here's where you will add some code to rollback on failure  
      - revert-migrations
      - destroy-environment
      - slack/notify:
          channel: C020NMZA3R9
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C020NMZA3R9
          event: pass
          template: basic_success_1

#cleanup:
#    docker:
      # Docker image here
#    steps:
      # Checkout code from git
#      - run:
#          name: Get old stack workflow id
#          command: |
            # your code here
#            export OldWorkflowID="the id here"
#            export STACKS=[] #put the list of stacks here
#      - run:
#          name: Remove old stacks and files
#          command: |
#            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#            then
              # your code here
#            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]

      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]
